// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package googleauthenticator.actions;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import com.mendix.core.Core;
import com.mendix.core.action.user.LoginAction;
import com.mendix.logging.ILogNode;
import com.mendix.m2ee.api.IMxRuntimeRequest;
import com.mendix.systemwideinterfaces.core.AuthenticationRuntimeException;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixIdentifier;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.mendix.systemwideinterfaces.core.ISession;
import com.mendix.systemwideinterfaces.core.IUser;
import com.mendix.systemwideinterfaces.core.UserAction;
import com.mendix.systemwideinterfaces.core.UserActionListener;
import com.mendix.webui.CustomJavaAction;
import googleauthenticator.proxies.GoogleAuthCredential;
import googleauthenticator.proxies.microflows.Microflows;
import system.proxies.User;

public class OverrideLoginAction extends CustomJavaAction<java.lang.Void>
{
	private IMendixObject __UserRoleForGAuthFlow;
	private system.proxies.UserRole UserRoleForGAuthFlow;

	public OverrideLoginAction(IContext context, IMendixObject UserRoleForGAuthFlow)
	{
		super(context);
		this.__UserRoleForGAuthFlow = UserRoleForGAuthFlow;
	}

	@java.lang.Override
	public java.lang.Void executeAction() throws Exception
	{
		this.UserRoleForGAuthFlow = __UserRoleForGAuthFlow == null ? null : system.proxies.UserRole.initialize(getContext(), __UserRoleForGAuthFlow);

		// BEGIN USER CODE
		gaUserRole = __UserRoleForGAuthFlow.getId();
		gaUserRoleList = new ArrayList<>();
		gaUserRoleList.add(gaUserRole);
		
		LoginActionListener loginActionListener = new LoginActionListener();
		loginActionListener.addReplaceEvent(GAuthLoginAction.class.getName());
		Core.addUserAction(GAuthLoginAction.class);
		Core.getListenersRegistry().addListener(loginActionListener);
		
		return null;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "OverrideLoginAction";
	}

	// BEGIN EXTRA CODE
	
	public static class LoginActionListener extends UserActionListener<LoginAction>{
		public LoginActionListener(){
			super(LoginAction.class);
		}
		@Override
		public boolean check(LoginAction action){
			Core.addUserAction(GAuthLoginAction.class);
			return true;
		}
	}

	private static IMendixIdentifier gaUserRole;
	private static List<IMendixIdentifier> gaUserRoleList;
	
	public static class GAuthLoginAction extends UserAction<ISession>
	{
	
		private String userName;
		private String password;
		private IMxRuntimeRequest request;
		private String currentSessionId;
		public final static String USER_NAME_PARAM = "userName";
		public final static String PASSWORD_PARAM = "password";
	
		private final static ILogNode _logNode = Core.getLogger("GoogleAuth");
	
		public GAuthLoginAction( Map<String, ? extends Object> params ) {
			super(Core.createSystemContext());
			this.userName = (String) params.get(USER_NAME_PARAM);
			this.password = (String) params.get(PASSWORD_PARAM);
			this.currentSessionId = (String) params.get("currentSessionId");
			this.request = (IMxRuntimeRequest) params.get("request");
		}
	
	
		@Override
		public ISession executeAction() throws Exception
		{
			_logNode.trace("New login request from [Source-IP: " + this.request.getRemoteAddr() + ", User-Agent: " + this.request.getHeader("User-Agent") + "]" );
			
			IUser user = Core.getUser(getContext(), this.userName);
			if ( user == null )
				throw new AuthenticationRuntimeException("Login FAILED: unknown user '" + this.userName + "'.");
			else if ( user.isWebserviceUser() )
				throw new AuthenticationRuntimeException("Login FAILED: client login attempt for web service user '" + this.userName + "'.");
			else if ( user.isAnonymous() )
				throw new AuthenticationRuntimeException("Login FAILED: client login attempt for guest user '" + this.userName + "'.");
			else if ( user.isActive() == false )
				throw new AuthenticationRuntimeException("Login FAILED: user '" + this.userName + "' is not active.");
			else if ( user.isBlocked() == true )
				throw new AuthenticationRuntimeException("Login FAILED: user '" + this.userName + "' is blocked.");
			else if ( user.getUserRoleNames().isEmpty() )
				throw new AuthenticationRuntimeException("Login FAILED: user '" + this.userName + "' does not have any user roles.");
	
			
			else if ( !Core.authenticate(Core.createSystemContext(), user, this.password) )
				throw new AuthenticationRuntimeException("Login FAILED: invalid password for user '" + user.getName() + "'.");
	

			// The user account is valid, first we need to setup the new roles
			IContext sContext = Core.createSystemContext();
			
			//TODO REMOVE THIS, it explicitly excludes MxAdmin from the logic
//			if( user.getName().equalsIgnoreCase("MxAdmin") ) {
//				ISession session = Core.initializeSession(user, this.currentSessionId);
//				return session;
//			}
			
			
			IMendixObject userMxObj = user.getMendixObject();
			GoogleAuthCredential gaCred = Microflows.findCreateGAuthCredentialForUser(sContext, User.initialize(sContext, userMxObj));
			
			List<IMendixIdentifier> roles = userMxObj.getValue(sContext, User.MemberNames.UserRoles.toString());
			
			//User does not has GA Role 
			if( !roles.contains(gaUserRole) ) {
				// copy the roles from user to cache
				gaCred.getMendixObject().setValue(sContext, GoogleAuthCredential.MemberNames.GoogleAuthCredential_Cached_UserRole.toString(), userMxObj.getValue(sContext, User.MemberNames.UserRoles.toString()) );
				Core.commit(sContext, gaCred.getMendixObject());
				//set GA role as the user role
				userMxObj.setValue(sContext, User.MemberNames.UserRoles.toString(), gaUserRoleList);
				Core.commit(sContext, userMxObj);
				_logNode.info("Assigning GAuth user role to user: " + user.getName());
			}
			else 
				_logNode.info("Skipping assigning GAuth user role to user: " + user.getName() + " user already has this role");
			
			
			ISession session = Core.initializeSession(user, this.currentSessionId);
			
			
			
			return session;
		}
	
	}
	
	// END EXTRA CODE
}
